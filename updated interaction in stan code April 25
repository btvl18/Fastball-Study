---
title: "Fastball Study"
author: "Joel Essenburg, Seth Buit, and Ben Vant Land"
format: 
  html:
    embed-resources: true
    code-tools: true
editor: visual
---

```{r include=FALSE}
library(tidyverse)
library(ggformula)
library(rethinking)
library(CalvinBayes)
library(dagitty)
```

## Data Wrangling

```{r}
df1 <- read.csv("stats.csv") 
df2 <- read.csv("pitch-arsenal-stats (1).csv") 
df3 <- read.csv("savant_data.csv") 

merged_data <- df1 %>%
  left_join(df3[, c("player_id", "release_extension")], by = "player_id") %>%
  left_join(df2[, c("player_id", "whiff_percent")], by = "player_id")

fastball_data <- na.omit(merged_data)

fastball_data <- fastball_data %>%
  rename(
    name = last_name..first_name,
    velo = ff_avg_speed,
    spin_rate = ff_avg_spin,
    ivb = ff_avg_break_z_induced,
    extension = release_extension,
    whiff_rate = whiff_percent
  ) %>%
  select(-year) %>% 
  mutate(
    first_name = gsub(".*, ", "", name),
    last_name = gsub(",.*", "", name),
    name = paste(first_name, last_name),
    whiff_rate = whiff_rate / 100
  ) %>%
  select(-first_name, -last_name) 
 
write.csv(fastball_data, "fastball_data.csv", row.names = FALSE)
```

## Data Glimpse

```{r}
fastball_data <- read.csv("fastball_data.csv")
glimpse(fastball_data)
```
## Standardize Data
```{r}
# Columns to standardize
cols_to_scale <- c("arm_angle", "velo", "spin_rate", "ivb", "extension")

# Create a copy with only those columns scaled
fastball_data[cols_to_scale] <- scale(fastball_data[cols_to_scale])

# Check the result
glimpse(fastball_data)
```

The data is from https://baseballsavant.mlb.com/. Baseball Savant has in-depth leaderboards for a variety of different MLB statistics, that are all available to download for free. We downloaded 3 different spreadsheets and wrangled them together (shown above) with the variables we want to include.

## Research Question

How does velocity affect the whiff rate of a 4-Seam Fastball of MLB pitchers?

## Causal Diagram

```{r}
diag <- dagitty("dag{
   arm_angle -> whiff_rate
   velo -> whiff_rate
   spin_rate -> whiff_rate
   ivb -> whiff_rate
   extension -> whiff_rate
   spin_rate -> ivb
   arm_angle -> velo
   arm_angle -> interaction
   ivb -> interaction
}")
gg_dag(diag,
       size = 0,
       )
```

Velocity and whiff rate is the main relationship we want to look at, so velocity will be our key predictor. Extension, or how far to the plate a pitcher releases the ball, is a precision covariate because it only affects whiff rate, so it will also be included in our model. In addition, spin rate affects ivb because the spin rate of a ball has an effect on the induced vertical break, or how much a pitch resists the force of gravity and appears to rise, which is partly a result of spin. Since both these variables have an effect on whiff rate, they are also precision covariates and will be included in the mode. Arm angle also affects velocity because especially from some lower arm angles it's harder to generate a high amount of velocity. It also affects whiff rate, so it's a confounder and will be included in the model. Finally, we will have an interaction between arm_angle and ivb, because the angle a pitch appears to be coming from can affect the effectiveness of the vertical break on a fastball. In this case this relationship is a moderator, so it will be included in the mode.

## Model Description

$$\text{whiff_rate} \sim \text{beta}(\omega, \kappa)$$ 
$$\text{logit}(\omega) = \beta_0 + \beta_1*\text{velo}+\beta_2*\text{spin_rate}+\beta_3*\text{extension}+\beta_4*\text(\text{arm_angle}*\text{ivb})+\beta_5*\text{arm_angle}+\beta_6*\text{ivb}$$ $$\beta_0 \sim \text{Norm}(0.217, 0.05)$$ $$\beta_{1-6} \sim \text{Norm}(0,1)$$ $$\kappa \sim \text{LogNorm}(0,2)$$ 
$$\alpha = \omega * (\kappa - 2) + 1$$
$$\beta = (1 - \omega) * (\kappa - 2) + 1$$
```{r}
#Mean of wiff rate based on https://www.baseballamerica.com/stories/why-do-mlb-pitchers-focus-so-much-on-velocity-how-fastball-data-explains-baseballs-growing-search-for-speed/
Intercept_mean <- logit(.217)
#One sd below based on prior knowledge
one_sd_below_mean <- logit(.06)

Intercept_mean-one_sd_below_mean
```

## Prior Predictive Distribution

```{r}
n_sim <- 100 
prior_pred_dist <- tibble(
  sim_id = c(1:n_sim)) |>
  mutate(
    b0 = rnorm(n_sim, mean = -1.283235, sd = 1.4683),
    b1 = rcauchy(n_sim, location = 0, scale = 2.5),
    b2 = rcauchy(n_sim, location = 0, scale = 2.5),
    b3 = rcauchy(n_sim, location = 0, scale = 2.5),
    b4 = rcauchy(n_sim, location = 0, scale = 2.5),
    b5 = rcauchy(n_sim, location = 0, scale = 2.5),
    b6 = rcauchy(n_sim, location = 0, scale = 2.5),
    kappa = rlnorm(n_sim, meanlog = 0, sdlog = 2)
  ) |>
  rowwise()  |> 
  mutate(
    omega = list(inv_logit(b0 + b1 * fastball_data$velo + b2 * fastball_data$spin_rate + b3 * fastball_data$extension + b4 * (fastball_data$arm_angle * fastball_data$ivb) + b5 * fastball_data$arm_angle + b6 * fastball_data$ivb)),
    velo = list(fastball_data$velo),
    spin_rate = list(fastball_data$spin_rate),
    extension = list(fastball_data$extension),
    arm_angle = list(fastball_data$arm_angle),
    ivb = list(fastball_data$ivb)
  ) |>
  unnest(cols = c(velo, spin_rate, extension, arm_angle, ivb,omega)) |>
  ungroup() |>
  mutate(
    alpha = omega * (kappa) + 1,
    beta = (1 - omega) * (kappa) + 1) |>
  rowwise() |>
  mutate(
    sim_whiff_rate = rbeta(1, shape1 = alpha, shape2 = beta),
  ) |>
  ungroup()
glimpse(prior_pred_dist)
```

```{r}
gf_dens(~sim_whiff_rate, group = ~sim_id, 
        data = prior_pred_dist)
```

From our prior predictive check, it appears that about half of our distributions are right skewed, and the other half are left skewed with the right skewed peak being around 0.10 and the left skewed peak being around 0.90. We don't think this is correct but aren't entirely sure how to fix it. We started with priors of Norm(0,1) but changed them after the peaks were almost 1.00 and 0.00. 


```{r}
stan_beta_fastball <- '
data {
  int<lower=1> n;     // number of observations
  vector<lower=0,upper=1>[n] whiff_rate;    // response
  vector[n] velo;     // predictor
  vector[n] spin_rate;     // predictor
  vector[n] extension;     // predictor
  vector[n] arm_angle;     // predictor
  vector[n] ivb;     // predictor
}
parameters {
  real<lower=0> kappa;  // concentration of beta dist
  real b0;               // intercept
  real b1;              // slope for velo
  real b2;              // slope for spin_rate
  real b3;              // slope for extension
  real b4;              // slope for interaction between arm_angle and ivb
  real b5;              // slope for arm_angle
  real b6;              // slope for ivb
  
}
model {
  vector[n] omega;
  vector[n] alpha;
  vector[n] beta;
  for ( i in 1:n ) {  
    omega[i] = inv_logit(b0 + b1 * velo[i] + b2 * spin_rate[i]+ b3 * extension[i]+ b4 * (arm_angle[i] * ivb[i])+ b5 * arm_angle[i]+ b6 * ivb[i]                   );
    alpha[i] = omega[i] * (kappa - 2) + 1;
    beta[i] = (1 - omega[i]) * (kappa - 2) + 1;
  }
  
  b0 ~ normal(-1.283235, 1);
  b1 ~ cauchy(0, 2.5);
  b2 ~ cauchy(0, 2.5);
  b3 ~ cauchy(0, 2.5);
  b4 ~ cauchy(0, 2.5);
  b5 ~ cauchy(0, 2.5);
  b6 ~ cauchy(0, 2.5);
  kappa ~ lognormal(0,2);
  whiff_rate ~ beta(alpha, beta); // have to use alpha, beta parameterization for beta()
} 


generated quantities {
 // this is not really required - only if you want values of omega, alpha, beta included in your fitted model
  vector[n] omega;
  vector[n] alpha;
  vector[n] beta;
  for (i in 1:n) {
    omega[i] = inv_logit(b0 + b1 * velo[i] + b2 * spin_rate[i]+ b3 * extension[i]+ b4 * (arm_angle[i] * ivb[i])+ b5 * arm_angle[i]+ b6 * ivb[i]); // if you want stan to compute modes for each data row       dis line
    alpha[i] = omega[i] * (kappa - 2) + 1; // if you want the beta parameters alpha and beta for each row
    beta[i] = (1 - omega[i]) * (kappa - 2) + 1;
  }
}'
```

```{r}
fastball_model <- stan(model_code = stan_beta_fastball, data = fastball_data)
```
